{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var _ = require('min-util')\nvar is = _.is\n\nvar defaultOption = {\n\tsep: '&',\n\teq: '=',\n\tencode: encodeURIComponent,\n\tdecode: decodeURIComponent,\n\tkeepRaw: false,\n\tsort: null,\n\tignoreValues: [undefined]\n}\n\nexports.parse = function(qs, sep, eq, opt) {\n\tqs += ''\n\topt = getOpt(sep, eq, opt)\n\tvar decode = opt.decode\n\t// var ret = {}\n\tqs = qs.split(opt.sep)\n\n\treturn _.reduce(qs, function(ret, arr) {\n\t\tarr = arr.split(opt.eq)\n\t\tif (2 == arr.length) {\n\t\t\tvar k = arr[0]\n\t\t\tvar v = arr[1]\n\t\t\tif (!opt.keepRaw) {\n\t\t\t\ttry {\n\t\t\t\t\tk = decode(k)\n\t\t\t\t\tv = decode(v)\n\t\t\t\t} catch (ignore) {}\n\t\t\t}\n\t\t\tret[k] = v\n\t\t}\n\t\treturn ret\n\t}, {})\n}\n\nexports.stringify = function(obj, sep, eq, opt) {\n\topt = getOpt(sep, eq, opt)\n\n\tvar keys = _.keys(obj)\n\n\tvar sort = opt.sort\n\tif (sort) {\n\t\tif (is.fn(sort)) {\n\t\t\tkeys.sort(sort)\n\t\t} else {\n\t\t\tkeys.sort()\n\t\t}\n\t}\n\n\tvar encode = opt.encode\n\n\tvar arr = []\n\t_.each(keys, function(key) {\n\t\tvar val = obj[key]\n\t\tif (!_.includes(opt.ignoreValues, val)) {\n\t\t\tif (is.nan(val) || null == val) {\n\t\t\t\tval = ''\n\t\t\t}\n\t\t\tif (!opt.keepRaw) {\n\t\t\t\tkey = encode(key)\n\t\t\t\tval = encode(val)\n\t\t\t}\n\t\t\tarr.push(key + opt.eq + val)\n\t\t}\n\t})\n\treturn arr.join(opt.sep)\n}\n\nfunction getOpt(sep, eq, opt) {\n\t// can be\n\t// _\n\t// opt\n\t// sep, opt\n\t// sep, eq, opt\n\topt = _.find(arguments, function(val) {\n\t\treturn is.object(val)\n\t})\n\tsep = is.nos(sep) ? sep : undefined\n\teq = is.nos(eq) ? eq : undefined\n\topt = _.extend({}, defaultOption, opt, {sep: sep, eq: eq})\n\treturn opt\n}\n\n"]}