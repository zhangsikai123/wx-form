{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["// wiki: http://en.wikipedia.org/wiki/URI_scheme\n// spec: https://url.spec.whatwg.org/\n// e.g. http://user:pass@host.com:8080/p/a/t/h?query=string#hash\n\nvar qs = require('min-qs')\nvar _ = require('min-util')\n\nexports.parse = function(url, parseQuery) {\n  if ('string' != typeof url) {\n    return url\n  }\n\n  var ret = {}, arr, rest\n\n  ret.href = url\n\n  // hash\n  arr = split(url, '#')\n  rest = arr[0]\n  if (arr[1]) {\n    ret.hash = '#' + arr[1]\n  }\n\n  // get scheme\n  arr = splicePattern(rest, /^[a-zA-Z][a-zA-Z0-9+-.]*:/)\n  rest = arr[1]\n  ret.protocol = arr[0].toLowerCase()\n\n  // query\n  arr = split(rest, '?')\n  rest = arr[0]\n  var query = arr[1]\n  if (parseQuery) {\n    query = qs.parse(query)\n  }\n  ret.query = query\n\n  // rest: `//user:pass@host.com:8080/p/a/t/h`\n\n  // not normal like http url\n  if ('/' != rest.charAt(0)) {\n    if (ret.schema) {\n      // rootless paths per RFC 3986 as opaque\n      // like mailto:xxx.com/path\n      ret.opaque = rest\n      return ret\n    }\n  }\n\n  // normal\n  if (_.startsWith(rest, '//')) {\n    rest = rest.slice(2)\n    arr = split(rest, '/')\n\n    ret.pathname = '/' + unescape(arr[1] || '')\n\n    arr = parseAuthority(arr[0])\n    ret.auth = arr[0]\n\n    // hostname, port\n    var host = arr[1]\n    arr = split(host, ':')\n    ret.hostname = arr[0]\n    ret.port = ~~arr[1]\n  }\n\n  return ret\n}\n\nvar slashProtocols = 'http https ftp gopher file'.split(' ')\n\nexports.format = function(obj) {\n  if (!obj || 'object' != typeof obj) return obj\n  var protocol = obj.protocol\n  var arr = [protocol]\n\n  if (!protocol || _.includes(slashProtocols, protocol.slice(0, protocol.length - 1))) {\n    arr.push('//')\n  }\n\n  if (obj.auth) {\n    arr.push(obj.auth, '@')\n  }\n\n  arr.push(obj.hostname)\n\n  if (obj.port) {\n    arr.push(':', obj.port)\n  }\n\n  arr.push(obj.pathname)\n\n  var query = obj.query\n  if (query) {\n    if ('string' != typeof query) {\n      query = qs.stringify(query)\n    }\n    if (query) {\n      arr.push('?', query)\n    }\n  }\n\n  arr.push(obj.hash)\n\n  var ret = []\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) ret.push(arr[i])\n  }\n\n  return ret.join('')\n}\n\nexports.appendQuery = function(url, query) {\n    var arr = split(url, '#')\n    url = arr[0]\n    var fragment = arr[1]\n\n    if (_.isObject(query)) {\n      query = qs.stringify(query)\n    }\n\n    if (_.includes(url, '?')) {\n      // has query\n      if (!_.endsWith(url, '&') && !_.endsWith(url, '?')) {\n        if (query) {\n          query = '&' + query\n        }\n      }\n\n    } else {\n      // no query\n      if (query) {\n        query = '?' + query\n      }\n    }\n\n    if (query) {\n      url += query\n    }\n\n    if (fragment) {\n      url += '#' + fragment\n    }\n\n    return url\n}\n\nfunction splicePattern(str, reg) {\n  var ret = ''\n  str = str.replace(reg, function(matched) {\n    ret = matched\n    return ''\n  })\n  return [ret, str]\n}\n\nfunction split(str, sep) {\n  var arr = []\n  var index = _.indexOf(str, sep)\n  if (-1 == index) {\n    arr[0] = str\n  } else {\n    arr[0] = str.slice(0, index)\n    arr[1] = str.slice(index + sep.length)\n  }\n  return arr\n}\n\nfunction parseAuthority(authAndHost) {\n  var arr = split(authAndHost, '@')\n  var auth = arr[0]\n  var host = arr[1]\n  if (!host) {\n    host = arr[0]\n    auth = null\n  }\n  return [auth, host]\n}\n"]}