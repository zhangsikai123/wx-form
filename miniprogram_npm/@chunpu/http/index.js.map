{"version":3,"sources":["index.js","src/index.js","src/http.js","src/queue.js","src/utils.js","src/adapters/index.js","src/adapters/wx.js","src/adapters/quickapp.js","src/adapters/axios.js","src/adapters/jquery.js","src/adapters/xhr.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;;ACDA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;ACFA,AHSA,ADGA,AENA,ACHA;ACFA,AHSA,ADGA,AENA,ACHA;ACFA,AHSA,ADGA,AENA,ACHA;ACFA,ACHA,AJYA,ADGA,AENA,ACHA;ACFA,ACHA,AJYA,ADGA,AENA,ACHA;ACFA,ACHA,AJYA,ADGA,AENA,ACHA;ACFA,AENA,ADGA,AJYA,ADGA,AENA,ACHA;ACFA,AENA,ADGA,AJYA,ACHA,ACHA;ACFA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,AHSA,AENA,ADGA,AJYA,ACHA,ACHA;AIXA,ACHA,AFMA,ADGA,AJYA,ACHA,ACHA;AIXA,ACHA,AFMA,ADGA,AJYA,ACHA,ACHA;AIXA,ACHA,AFMA,ADGA,AJYA,AENA;AIXA,ACHA,AFMA,ADGA,AIZA,ARwBA,AENA;AIXA,ACHA,AFMA,ADGA,AIZA,ARwBA,AENA;AIXA,ACHA,AFMA,ADGA,AIZA,ARwBA,AENA;AIXA,ACHA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AFMA,ADGA,AIZA,ARwBA,AENA;AKdA,AHSA,AIZA,ARwBA,AENA;AKdA,ACHA,ARwBA,AENA;AMjBA,ARwBA,AENA;AMjBA,ARwBA,AENA;AMjBA,ARwBA,AENA;AMjBA,ARwfile":"index.js","sourcesContent":["module.exports = require('./src/index.js')\n","const _ = require('min-util')\nconst HttpClient = require('./http')\n\nconst instance = new HttpClient()\n\nmodule.exports = exports = http // always export a function\n\nfunction http(...args) {\n  return instance.request(...args)\n}\n\nfor (var key in instance) {\n  var val = instance[key]\n  if (_.isFunction(val)) {\n    val = _.bind(val, instance)\n  }\n  http[key] = val\n}\n","const _ = require('min-util')\nconst Url = require('min-url')\nconst qs = require('min-qs')\nconst Queue = require('./queue')\nconst utils = require('./utils')\nconst adapters = require('./adapters')\n\nconst JSON_TYPE = 'application/json'\nconst URL_TYPE = 'application/x-www-form-urlencoded'\nconst CONTENT_TYPE_KEY = utils.CONTENT_TYPE_KEY\nconst simpleMethods = ['get', 'head', 'delete', 'options']\nconst dataMethods = ['post', 'put', 'patch']\nconst httpMethods = [...simpleMethods, ...dataMethods]\n\nfunction HttpClient (opt) {\n  this.defaults = {\n    baseURL: '',\n    timeout: 0,\n    headers: {\n      common: {}\n    },\n    withCredentials: false\n  }\n  _.each(httpMethods, method => {\n    var header = this.defaults.headers[method] = {}\n    if (_.includes(dataMethods, 'method')) {\n      header[method] = JSON_TYPE\n    }\n  })\n\n  this.interceptors = {\n    request: new Queue(),\n    response: new Queue()\n  }\n\n  this.qs = qs\n\n  this.init(opt)\n}\n\nHttpClient.qs = qs\n\nvar proto = HttpClient.prototype\n\nproto.init = function (opt) {\n  // not exist in axios\n  opt = _.extend({}, opt)\n  this.defaults.headers.common = opt.headers || {}\n  delete opt.headers\n  _.extend(this.defaults, opt)\n}\n\nproto.create = function (opt) {\n  return new HttpClient(opt)\n}\n\nproto.request = function (arg1, arg2) {\n  if (_.isString(arg1)) {\n    return this.request(_.extend({url: arg1}, arg2))\n  }\n  var config = arg1 || {}\n  config.headers = config.headers || {} // 必须有值\n  config = _.extend({}, this.defaults, config)\n\n  var url = config.baseURL + config.url\n  url = Url.appendQuery(url, config.params)\n\n  var method = _.toLower(config.method) || 'get'\n  var defaultHeaders = this.defaults.headers\n  var headers = _.extend({}, defaultHeaders.common, defaultHeaders[method], config.headers)\n  var contentType = utils.getContentType(headers)\n  var guessRequestType = contentType\n\n  // 序列化 request data\n  var data = config.data\n  if (_.isPlainObject(data)) {\n    // 只序列化 plain object, 其他直接发送, 比如字符串, FormData, Blob 之类的\n    if (contentType === URL_TYPE) {\n      data = qs.stringify(data)\n    } else if (contentType === JSON_TYPE) {\n      data = JSON.stringify(data)\n    }\n    if (!guessRequestType) {\n      if (_.isString(data)) {\n        guessRequestType = URL_TYPE\n      }\n    }\n    if (!_.isString(data)) {\n      data = JSON.stringify(data) // 默认用 json\n      guessRequestType = guessRequestType || JSON_TYPE\n    }\n    if (!contentType && guessRequestType) {\n      headers[CONTENT_TYPE_KEY] = guessRequestType\n    }\n  } else {\n    if (utils.isFormData(data)) {\n      // Let the browser set it\n      delete headers[CONTENT_TYPE_KEY]\n    }\n  }\n\n  var timeout = config.timeout\n\n  // TODO auth...\n  config = {\n    url,\n    data,\n    headers,\n    method: _.toUpper(method),\n    withCredentials: config.withCredentials\n  }\n\n  if (timeout) {\n    config.timeout = timeout\n  }\n\n  var ret = Promise.resolve(config)\n  ret = this.interceptors.request.intercept(ret) // after get config\n    .then(config => this.adapter.call(this, config))\n    .then(response => {\n      // 尝试解析 response.data, 总是尝试解析成 json(就像 axios 一样), 因为后端通常写不对 mime\n      if (_.isString(response.data)) {\n        if (!this.axios) {\n          var rawResponse = response.data\n          try {\n            response.data = JSON.parse(response.data)\n          } catch (err) {\n            response.data = rawResponse\n          }\n        }\n      }\n      response.config = config\n      response.headers = _.mapKeys(response.headers, (value, key) => {\n        return _.toLower(key) // All header names are lower cased\n      })\n      return response\n    })\n  ret = this.interceptors.response.intercept(ret) // after parse data\n  return ret\n}\n\n// axios adapter\nproto.adapter = function (config) {\n  var defaults = this.defaults\n  if (defaults.wx) {\n    return adapters.wx.call(this, config)\n  } else if (defaults.axios) {\n    return adapters.axios.call(this, config)\n  } else if (defaults.jQuery) {\n    return adapters.jquery.call(this, config)\n  } else if (defaults.quickapp) {\n    return adapters.quickapp.call(this, config)\n  } else if (typeof XMLHttpRequest === 'function') {\n    return adapters.xhr.call(this, config)\n  }\n}\n\n_.each(simpleMethods, method => {\n  proto[method] = function (url, config) {\n    return this.request(_.extend({\n      method,\n      url\n    }, config))\n  }\n})\n\n_.each(dataMethods, method => {\n  proto[method] = function (url, data, config) {\n    return this.request(_.extend({\n      url,\n      method,\n      data\n    }, config))\n  }\n})\n\nmodule.exports = exports = HttpClient\n","const _ = require('min-util')\n\nmodule.exports = Queue\n\nfunction Queue() {\n  this.queue = []\n}\n\n_.extend(Queue.prototype, {\n  use (...middleware) {\n    this.queue.push(middleware)\n    return this\n  },\n  intercept (promise) {\n    return _.reduce(this.queue, (prev, middleware) => {\n      return prev.then(...middleware)\n    }, promise)\n  }\n})\n","const _ = require('min-util')\n\nconst CONTENT_TYPE_KEY = 'Content-Type'\nconst reContentType = new RegExp(CONTENT_TYPE_KEY, 'i')\n\nfunction getContentType(headers) {\n  var headerKeys = _.keys(headers)\n  var typeKey = _.find(headerKeys, key => {\n    return reContentType.test(key)\n  })\n  return headers[typeKey]\n}\n\nfunction parseHeadersFromXhr(xhr) {\n  return _.chain(xhr.getAllResponseHeaders())\n    .trim()\n    .split('\\n')\n    .reduce((ret, header) => {\n      var i = _.indexOf(header, ':')\n      var key = _.toLower(_.trim(_.slice(header, 0, i)))\n      var value = _.trim(_.slice(header, i + 1))\n      if (ret[key]) {\n        ret[key] = ',' + value // 多个 cookie 用 `,` 分隔, 无空格\n      } else {\n        ret[key] = value\n      }\n      return ret\n    }, {})\n    .value()\n}\n\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData)\n}\n\nfunction timeout(time) {\n  return new Promise((resolve, reject) => {\n    if (timeout) {\n      setTimeout(() => {\n        reject(new Error('timeout'))\n      }, time)\n    }\n  })\n}\n\nfunction clearTimer(timer) {\n  if (timer) {\n    clearTimeout(timer)\n  }\n}\n\nfunction createError(message, obj) {\n  var err = new Error(message)\n  _.extend(err, obj)\n  return err\n}\n\nexports.CONTENT_TYPE_KEY = CONTENT_TYPE_KEY\nexports.getContentType = getContentType\nexports.parseHeadersFromXhr = parseHeadersFromXhr\nexports.isFormData = isFormData\nexports.timeout = timeout\nexports.clearTimer = clearTimer\nexports.createError = createError\n","const wx = require('./wx')\nconst quickapp = require('./quickapp')\nconst axios = require('./axios')\nconst jquery = require('./jquery')\nconst xhr = require('./xhr')\n\nexports.wx = wx\nexports.quickapp = quickapp\nexports.axios = axios\nexports.jquery = jquery\nexports.xhr = xhr\n","const utils = require('../utils')\n\nmodule.exports = function(config) {\n  var defaults = this.defaults\n  if (defaults && defaults.wx) {\n    // https://developers.weixin.qq.com/miniprogram/dev/api/network-request.html#wxrequestobject\n    var timer\n    return new Promise((resolve, reject) => {\n      var task = defaults.wx.request({\n        url: config.url,\n        data: config.data,\n        header: config.headers,\n        method: config.method,\n        success (response) {\n          utils.clearTimer(timer)\n          var {data, statusCode, header} = response\n          resolve({\n            data,\n            status: statusCode,\n            headers: header\n          })\n        },\n        fail (err) {\n          utils.clearTimer(timer)\n          reject(err)\n        }\n      })\n\n      if (config.timeout) {\n        timer = setTimeout(() => {\n          if (task && task.abort) {\n            task.abort\n          }\n          reject(utils.createError('timeout'))\n        }, config.timeout)\n      }\n    })\n  }\n}\n","const utils = require('../utils')\n\nmodule.exports = function(config) {\n  var defaults = this.defaults\n  if (defaults && defaults.quickapp) {\n    // https://doc.quickapp.cn/features/system/fetch.html\n    return new Promise((resolve, reject) => {\n      defaults.quickapp.fetch({\n        url: config.url,\n        data: config.data,\n        header: config.headers,\n        method: config.method,\n        success (response) {\n          utils.clearTimer(timer)\n          var {data, code, headers} = response\n          resolve({\n            data,\n            status: code,\n            headers\n          })\n        },\n        fail (data, code) {\n          utils.clearTimer(timer)\n          reject({data, code})\n        }\n      })\n\n      if (config.timeout) {\n        timer = setTimeout(() => {\n          reject(utils.createError('timeout'))\n        }, config.timeout)\n      }\n    })\n  }\n}\n","module.exports = function(config) {\n  var defaults = this.defaults\n  if (defaults && defaults.axios) {\n    // https://github.com/axios/axios\n    return defaults.axios.request(config).then(response => {\n      return response\n    })\n  }\n}\n","const utils = require('../utils')\n\nmodule.exports = function(config) {\n  var defaults = this.defaults\n  if (defaults && defaults.jQuery) {\n    // http://api.jquery.com/jquery.ajax/\n    return new Promise((resolve, reject) => {\n      defaults.jQuery.ajax({\n        url: config.url,\n        data: config.data,\n        headers: config.headers,\n        method: config.method,\n        timeout: config.timeout,\n        withCredentials: config.withCredentials,\n        success (data, textStatus, jqXHR) {\n          resolve({\n            data,\n            status: 200,\n            headers: utils.parseHeadersFromXhr(jqXHR)\n          })\n        },\n        error (jqXHR, textStatus, errorThrown) {\n          reject(utils.createError(errorThrown, {\n            response: jqXHR,\n            textStatus: textStatus\n          }))\n        }\n      })\n    })\n  }\n}\n","const utils = require('../utils')\n\nmodule.exports = function(config) {\n  // default use XMLHttpRequest\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.onload = ev => {\n      resolve({\n        status: xhr.status,\n        data: xhr.responseText,\n        headers: utils.parseHeadersFromXhr(xhr)\n      })\n    }\n    xhr.ontimeout = ev => {\n      reject(utils.createError('timeout'))\n    }\n    xhr.onerror = ev => {\n      reject(utils.createError('error'))\n    }\n    xhr.open(config.method, config.url, true)\n    if (config.timeout) {\n      xhr.timeout = config.timeout\n    }\n    if (config.withCredentials) {\n      xhr.withCredentials = config.withCredentials\n    }\n    _.forIn(config.headers, (value, key) => {\n      xhr.setRequestHeader(key, value)\n    })\n    xhr.send(config.data)\n  })\n}\n"]}