{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var is = require('min-is')\n\nvar slice = [].slice\n\nvar _ = exports\n\n_.is = is\n\n_.extend = _.assign = extend\n\n_.each = each\n\n_.map = function(arr, fn) {\n\tvar ret = []\n\teach(arr, function(item, i, arr) {\n\t\tret[i] = fn(item, i, arr)\n\t})\n\treturn ret\n}\n\n_.filter = function(arr, fn) {\n\tvar ret = []\n\teach(arr, function(item, i, arr) {\n\t\tvar val = fn(item, i, arr)\n\t\tif (val) ret.push(item)\n\t})\n\treturn ret\n}\n\n_.some = function(arr, fn) {\n\treturn -1 != findIndex(arr, fn)\n}\n\n_.every = function(arr, fn) {\n\treturn -1 == findIndex(arr, negate(fn))\n}\n\n_.reduce = reduce\n\n_.findIndex = findIndex\n\n_.find = function(arr, fn) {\n\tvar index = _.findIndex(arr, fn)\n\tif (-1 != index) {\n\t\treturn arr[index]\n\t}\n}\n\n_.indexOf = indexOf\n\n_.includes = function(val, sub) {\n\treturn -1 != indexOf(val, sub)\n}\n\n_.toArray = toArray\n\n_.slice = function(arr, start, end) {\n\t// support array and string\n\tvar ret = [] // default return array\n\tvar len = getLength(arr)\n\tif (len >= 0) {\n\t\tstart = start || 0\n\t\tif (0 !== end) {\n\t\t\tend = end || len\n\t\t}\n\t\t// raw array and string use self slice\n\t\tif (!is.fn(arr.slice)) {\n\t\t\tarr = toArray(arr)\n\t\t}\n\t\tret = arr.slice(start, end)\n\t}\n\treturn ret\n}\n\n_.negate = negate\n\n_.forIn = forIn\n\n_.keys = keys\n\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\n\n_.trim = function(str) {\n\tif (null == str) return ''\n\treturn ('' + str).replace(rtrim, '')\n}\n\n_.noop = function() {}\n\n_.len = getLength\n\nfunction getLength(arr) {\n\tif (null != arr) return arr.length\n}\n\nfunction each(arr, fn) {\n\tvar len = getLength(arr)\n\tif (len && is.fn(fn)) {\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif (false === fn(arr[i], i, arr)) break\n\t\t}\n\t}\n\treturn arr\n}\n\nfunction findIndex(arr, fn) {\n\tvar ret = -1\n\teach(arr, function(item, i, arr) {\n\t\tif (fn(item, i, arr)) {\n\t\t\tret = i\n\t\t\treturn false\n\t\t}\n\t})\n\treturn ret\n}\n\nfunction toArray(arr) {\n\tvar ret = []\n\teach(arr, function(item) {\n\t\tret.push(item)\n\t})\n\treturn ret\n}\n\n\nfunction extend(target) {\n\tif (target) {\n\t\tvar sources = slice.call(arguments, 1)\n\t\teach(sources, function(src) {\n\t\t\tforIn(src, function(val, key) {\n\t\t\t\tif (!is.undef(val)) {\n\t\t\t\t\ttarget[key] = val\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\treturn target\n}\n\nfunction negate(fn) {\n\treturn function() {\n\t\treturn !fn.apply(this, arguments)\n\t}\n}\n\nfunction indexOf(val, sub) {\n\tif (is.string(val)) return val.indexOf(sub)\n\n\treturn findIndex(val, function(item) {\n\t\t// important!\n\t\treturn sub === item\n\t})\n}\n\nfunction reduce(arr, fn, prev) {\n\teach(arr, function(item, i) {\n\t\tprev = fn(prev, item, i, arr)\n\t})\n\treturn prev\n}\n\nfunction forIn(hash, fn) {\n\tif (hash) {\n\t\tfor (var key in hash) {\n\t\t\tif (is.owns(hash, key)) {\n\t\t\t\tif (false === fn(hash[key], key, hash)) break\n\t\t\t}\n\t\t}\n\t}\n\treturn hash\n}\n\nfunction keys(hash) {\n\tvar ret = []\n\tforIn(hash, function(val, key) {\n\t\tret.push(key)\n\t})\n\treturn ret\n}\n\n"]}